version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai_data_engineering_db
    environment:
      POSTGRES_DB: ai_data_engineering
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai_data_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_data_engineering"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: ai_data_engineering_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_data_engineering_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_data_engineering_app
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ai_data_engineering
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres123}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - KAGGLE_USERNAME=${KAGGLE_USERNAME}
      - KAGGLE_KEY=${KAGGLE_KEY}
      - STREAMLIT_PORT=8501
      - DEBUG=${DEBUG:-False}
    ports:
      - "8501:8501"
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ai_data_network
    restart: unless-stopped
    command: streamlit run src/web/streamlit_app.py --server.port=8501 --server.address=0.0.0.0

  # ETL Service (optional, for scheduled data updates)
  etl:
    build:
      context: .
      dockerfile: Dockerfile.etl
    container_name: ai_data_engineering_etl
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ai_data_engineering
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres123}
      - KAGGLE_USERNAME=${KAGGLE_USERNAME}
      - KAGGLE_KEY=${KAGGLE_KEY}
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ai_data_network
    restart: "no"
    command: python src/etl/run_etl.py

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ai_data_engineering_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - ai_data_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai_data_network:
    driver: bridge
